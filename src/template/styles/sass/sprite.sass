// SASS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home
//   width: $icon-home-width
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites
$phone-blue-name: 'phone-blue'
$phone-blue-x: 0px
$phone-blue-y: 0px
$phone-blue-offset-x: 0px
$phone-blue-offset-y: 0px
$phone-blue-width: 14px
$phone-blue-height: 17px
$phone-blue-total-width: 42px
$phone-blue-total-height: 17px
$phone-blue-image: '../../img/sprite.png'
$phone-blue: (0px, 0px, 0px, 0px, 14px, 17px, 42px, 17px, '../../img/sprite.png', 'phone-blue', )
$phone-white-name: 'phone-white'
$phone-white-x: 14px
$phone-white-y: 0px
$phone-white-offset-x: -14px
$phone-white-offset-y: 0px
$phone-white-width: 14px
$phone-white-height: 17px
$phone-white-total-width: 42px
$phone-white-total-height: 17px
$phone-white-image: '../../img/sprite.png'
$phone-white: (14px, 0px, -14px, 0px, 14px, 17px, 42px, 17px, '../../img/sprite.png', 'phone-white', )
$placeholder-white-name: 'placeholder-white'
$placeholder-white-x: 28px
$placeholder-white-y: 0px
$placeholder-white-offset-x: -28px
$placeholder-white-offset-y: 0px
$placeholder-white-width: 14px
$placeholder-white-height: 16px
$placeholder-white-total-width: 42px
$placeholder-white-total-height: 17px
$placeholder-white-image: '../../img/sprite.png'
$placeholder-white: (28px, 0px, -28px, 0px, 14px, 16px, 42px, 17px, '../../img/sprite.png', 'placeholder-white', )
$spritesheet-width: 42px
$spritesheet-height: 17px
$spritesheet-image: '../../img/sprite.png'
$spritesheet-sprites: ($phone-blue, $phone-white, $placeholder-white, )
$spritesheet: (42px, 17px, '../../img/sprite.png', $spritesheet-sprites, )

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home
//   @include sprite-width($icon-home)
//
// .icon-email
//   @include sprite($icon-email)
//
// Example usage in HTML:
//   `display: block` sprite:
//   <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//   // CSS
//   .icon {
//     display: inline-block;
//   }
//
//   // HTML
//   <i class="icon icon-home"></i>
@mixin sprite-width($sprite)
  width: nth($sprite, 5)

@mixin sprite-height($sprite)
  height: nth($sprite, 6)

@mixin sprite-position($sprite)
  $sprite-offset-x: nth($sprite, 3)
  $sprite-offset-y: nth($sprite, 4)
  background-position: $sprite-offset-x  $sprite-offset-y

@mixin sprite-image($sprite)
  $sprite-image: nth($sprite, 9)
  background-image: url(#{$sprite-image})

@mixin sprite($sprite)
  @include sprite-image($sprite)
  @include sprite-position($sprite)
  @include sprite-width($sprite)
  @include sprite-height($sprite)

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SASS
//
// @include sprites($spritesheet-sprites)
@mixin sprites($sprites)
  @each $sprite in $sprites
    $sprite-name: nth($sprite, 10)
    .#{$sprite-name}
      @include sprite($sprite)


.icon-
  &phone-blue
    @include sprite($phone-blue)
  &phone-white
    @include sprite($phone-white)
  &placeholder-white
    @include sprite($placeholder-white)